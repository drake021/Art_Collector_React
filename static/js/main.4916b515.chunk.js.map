{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","children","Feature","featuredResult","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","id","toLowerCase","map","person","index","key","displayname","name","src","alt","Fragment","Loading","Preview","setFeaturedResult","info","searchResults","fetchPage","pageUrl","results","disabled","prev","next","record","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setCentury","setClassification","setQueryString","useEffect","Promise","all","then","centuries","classifications","onSubmit","htmlFor","type","placeholder","onChange","e","target","length","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4916b515.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=64959ba7-8a36-4825-a62c-bb783c7badf8';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n    const searchTerm = props.searchTerm;\n    const searchValue = props.searchValue;\n    const setIsLoading = props.setIsLoading;\n    const setSearchResults = props.setSearchResults;\n\n    return <span className=\"content\">\n        <a href=\"#\" onClick={async (event) => {\n            event.preventDefault();\n            setIsLoading(true);\n            try {\n                const result = await fetchQueryResultsFromTermAndValue( searchTerm, searchValue );\n                setSearchResults(result);\n            } catch (error) {\n                console.error(error);\n            } finally {\n                setIsLoading(false);\n            }\n        }}>{props.children}</a>\n    </span>\n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\nconst Feature = (props) => {\n    const featuredResult = props.featuredResult;\n    const title = props.featuredResult.title;\n    const dated = props.featuredResult.dated;\n    const images = props.featuredResult.images;\n    const primaryimageurl = props.featuredResult.primaryimageurl;\n    const description = props.featuredResult.description;\n    const culture = props.featuredResult.culture;\n    const style = props.featuredResult.style;\n    const technique = props.featuredResult.technique;\n    const medium = props.featuredResult.medium;\n    const dimensions = props.featuredResult.dimensions;\n    const people = props.featuredResult.people;\n    const department = props.featuredResult.department;\n    const division = props.featuredResult.division;\n    const contact = props.featuredResult.contact;\n    const creditline = props.featuredResult.creditline;\n\n    return featuredResult ?\n        <main id=\"feature\">\n            <div className=\"object-feature\">\n                <header>\n                    <h3> {title} </h3>\n                    <h4> {dated} </h4>\n                </header>\n                <section className=\"facts\">\n                    {description ? <> <span className=\"title\">Description</span>\n                        <span className=\"content\">{description}</span> </> : null}\n                    {culture ? <><span className=\"title\">Culture</span>\n                        <span className=\"content\"><Searchable searchTerm=\"culture\" searchValue={culture} setIsLoading={props.setIsLoading} setSearchResults={props.setSearchResults}>{culture}</Searchable></span> </> : null}\n                    {medium ? <> <span className=\"title\">Medium</span>\n                        <span className=\"content\"><Searchable searchTerm=\"medium\" searchValue={medium.toLowerCase()} setIsLoading={props.setIsLoading} setSearchResults={props.setSearchResults}>{medium}</Searchable></span> </> : null}\n                    {dimensions ? <> <span className=\"title\">Dimensions</span>\n                        <span className=\"content\">{dimensions}</span> </> : null}\n                    {style ? <> <span className=\"title\">Style</span>\n                        <span className=\"content\">{style}</span> </> : null}\n                    {technique ? <> <span className=\"title\">Technique</span>\n                        <span className=\"content\"><Searchable searchTerm=\"technique\" searchValue={technique} setIsLoading={props.setIsLoading} setSearchResults={props.setSearchResults}>{technique}</Searchable></span> </> : null}\n                    {people ? <> <span className=\"title\">Person</span>\n                        {people.map((person, index) => {\n                            return <span key={index} className=\"content\"><Searchable searchTerm=\"person\" searchValue={person.displayname} setIsLoading={props.setIsLoading} setSearchResults={props.setSearchResults}>{person.name}</Searchable> </span>\n                        })} </> : null}\n                    {department ? <> <span className=\"title\">Department</span>\n                        <span className=\"content\">{department}</span> </> : null}\n                    {division ? <> <span className=\"title\">Division</span>\n                        <span className=\"content\">{division}</span> </> : null}\n                    {contact ? <> <span className=\"title\">Contact</span>\n                        <span className=\"content\">{contact}</span> </> : null}\n                    {creditline ? <> <span className=\"title\">Credit</span>\n                        <span className=\"content\">{creditline}</span> </> : null}\n                </section>\n                { images ? <><section className=\"photos\">\n                    <img src={primaryimageurl} alt={images.map((images, index) => {\n                        return <React.Fragment key={index}>{images}</React.Fragment>\n                    })} />\n                </section> </> : null }\n            </div>\n        </main>\n        :\n        <main id=\"feature\"></main>\n\n\n}\n\nexport default Feature;","import React from 'react';\n\nconst Loading = () => {\n  return <div id=\"loading\">\n    <h2 className=\"message\">Searching...</h2>\n  </div>\n};\n\nexport default Loading;","import React from 'react';\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  const setIsLoading = props.setIsLoading;\n  const setSearchResults = props.setSearchResults;\n  const setFeaturedResult = props.setFeaturedResult;\n  const info = props.searchResults.info;\n  const records = props.searchResults.records;\n\n\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      <button \n        disabled={ info.prev ? false : true } \n        className=\"previous\"\n        onClick={ () => {\n        fetchPage(info.prev) \n        }}>Previous</button>\n      <button\n        disabled={ info.next ? false : true }\n        className=\"next\"\n        onClick={ () => {\n          fetchPage(info.next) \n        }}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n       records.map((record, index) => {\n        return <div  \n        key={ index }\n        className=\"object-preview\"\n        onClick={(event) => {\n          event.preventDefault();\n          setFeaturedResult(record);\n        }}>\n        { \n          record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : null \n        }\n        {\n          record.title ?  <h3>{ record.title }</h3> : <h3>MISSING INFO</h3>\n        }\n      </div>\n      })}\n    \n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  let setIsLoading = props.setIsLoading;\n  let setSearchResults = props.setSearchResults;\n\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [century, setCentury] = useState('any');\n  const [classification, setClassification] = useState('any');\n  const [queryString, setQueryString] = useState('');\n\n\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n      .then(([centuries, classifications]) => {\n        setCenturyList(centuries);\n        setClassificationList(classifications);\n        console.error();\n      })\n  }, []);\n\n  return <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      const result = await fetchQueryResults({ century, classification, queryString });\n      setSearchResults(result);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n\n  }}>\n\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input\n        id=\"keywords\"\n        type=\"text\"\n        placeholder=\"enter keywords...\"\n        value={queryString}\n        onChange={function (e) {\n          setQueryString(e.target.value)\n        }\n\n        } />\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({classificationList.length})</span></label>\n      <select\n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification}\n        onChange={function (e) {\n          setClassification(e.target.value)\n        }}>\n        <option value=\"any\">Any</option>\n        {classificationList.map((classification, index) => {\n          return <option key={index}>{classification.name}</option>\n        })}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({centuryList.length})</span></label>\n      <select\n        name=\"century\"\n        id=\"select-century\"\n        value={century}\n        onChange={function (e) {\n          setCentury(e.target.value)\n        }}>\n        <option value=\"any\">Any</option>\n        {centuryList.map((century, index) => {\n          return <option key={index}>{century.name} </option>\n        })}\n      </select>\n    </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\n\nconst Title = () => {\n    return <div id=\"title\">\n        <h1>\n            The Art Collector\n        </h1>\n        <h5>\n            Search the Harvard Art Museums' Private Collections\n        </h5>\n    </div>\n}\n\nexport default Title;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  return <div className=\"app\">\n    <Title />\n    <Search\n      setIsLoading={setIsLoading}\n      setSearchResults={setSearchResults} />\n    <Preview\n      searchResults={searchResults}\n      setIsLoading={setIsLoading}\n      setSearchResults={setSearchResults}\n      setFeaturedResult={setFeaturedResult} />\n    <Feature\n      featuredResult={featuredResult}\n      setIsLoading={setIsLoading}\n      setSearchResults={setSearchResults} />\n    {isLoading ? <Loading\n      setIsLoading={setIsLoading ? false : null} /> : null}\n  </div>\n}\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)"],"sourceRoot":""}